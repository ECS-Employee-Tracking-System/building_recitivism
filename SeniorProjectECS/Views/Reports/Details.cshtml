@model SeniorProjectECS.Models.StaffFilterViewModel
@using SeniorProjectECS.Library

<script src="~/lib/jquery-table2excel/dist/jquery.table2excel.min.js"></script>
<script src="~/lib/moment/min/moment.min.js"></script>

@Html.ActionLink("Edit Filter", "EditFilter", Model.Filter)
<br />
<input type="button" class="btn btn-default" value="Save Filter" data-toggle="modal" data-target="#saveFilter" />
<table class="table table-bordered table-condensed tablesorter" id="StaffTable">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].StaffMemberID)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].Email)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].DateOfHire)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].CDAInProgress)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].CDARenewalProcess)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].Comments)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].Goal)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].MidYear)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].EndYear)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].GoalMet)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].TAndAApp)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].AppApp)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].ClassCompleted)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].ClassPaid)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].RequiredHours)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].HoursEarned)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].TermDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StaffMembers[0].IsInactive)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.StaffMembers)
        {
            // Filter inactive staff members
            if (!item.IsInactive)
            {
                // check if member CDA is about to expire
                String CDAFormat;

                if (item.CDAExpiration?.Subtract(DateTime.Now).Days <= 30)
                {
                    CDAFormat = "danger";
                }
                else if (item.CDAExpiration?.Subtract(DateTime.Now).Days <= 60)
                {
                    CDAFormat = "warning";
                }
                else if (item.CDAExpiration?.Subtract(DateTime.Now).Days <= 90)
                {
                    CDAFormat = "info";
                }
                else
                {
                    CDAFormat = "";
                }//end expiration check

                // check if member DC is about to expire
                String DCFormat;
                if (item.DCExpiration?.Subtract(DateTime.Now).Days <= 30)
                {
                    DCFormat = "danger";
                }
                else if (item.DCExpiration?.Subtract(DateTime.Now).Days <= 60)
                {
                    DCFormat = "warning";
                }
                else if (item.DCExpiration?.Subtract(DateTime.Now).Days <= 90)
                {
                    DCFormat = "info";
                }
                else
                {
                    DCFormat = "";
                }//end expiration check


                <tr id="@item.StaffMemberID">
                    <td>
                        @Html.DisplayFor(modelItem => item.StaffMemberID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.FirstName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DateOfHire)
                    </td>
                    <td>
                        @(item.CDAInProgress ? "Yes" : "No")
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CDARenewalProcess)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Comments)
                    </td>
                    <td>
                        @(item.Goal ? "Yes" : "No")
                    </td>
                    <td>
                        @(item.MidYear ? "Yes" : "No")
                    </td>
                    <td>
                        @(item.EndYear ? "Yes" : "No")
                    </td>
                    <td>
                        @(item.GoalMet ? "Yes" : "No")
                    </td>
                    <td>
                        @(item.TAndAApp ? "Yes" : "No")
                    </td>
                    <td>
                        @(item.AppApp ? "Yes" : "No")
                    </td>
                    <td>
                        @(item.ClassCompleted ? "Yes" : "No")
                    </td>
                    <td>
                        @(item.ClassPaid ? "Yes" : "No")
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.RequiredHours)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.HoursEarned)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TermDate)
                    </td>
                    <td>
                        @(item.IsInactive ? "Yes" : "No")
                    </td>
                </tr>
            }

        }
    </tbody>
</table>
<script>
     var RTBody=[];
             @foreach (var item in Model.StaffMembers)
             {
                 foreach (var cert in item.CompletedCerts)
                 {
                    <text>
                    var staffID = '@item.StaffMemberID';
                    var certExpDate ='@cert.ExpireDate';
                    var certToJS =findAndReplace('@cert.Cert.CertName', " ", "_") ;
                    var isReq = '@cert.IsRequired';
                    var DaysUnitlExp= @cert.DaysUntilExpire
                   
                    console.log(staffID,certToJS, isReq);
                    var razorToPush = new Object;
                    razorToPush.staffID = staffID;
                    razorToPush.certName =certToJS;
                    razorToPush.certExpDate=certExpDate;
                    razorToPush.isReq = isReq;
                    razorToPush.DaysUnitlExp = parseInt(DaysUnitlExp);
                    RTBody.push(razorToPush);

                    </text>
                 }
                
             }
</script>
<button class="btn-primary" onclick="exportexcel()">Export to Excel</button>

<!-- Begin name filter save modal -->
<script type="text/javascript">
    function validateSave() {

        // Ensure that a filter name is given
        if ($('#Filter_FilterName').val() == '') {
            alert("Please enter a filter name.");
            return false;
        }

        // Check if we want to override a filter if it already exists
        $.get("/Reports/ValidateSave", { filterName: $('#Filter_FilterName').val() },
            function (response) {
                if (response == "false") {
                    if (confirm("Filter name already in use. Do you want to overwrite it?")) {
                        $('#saveFilterForm').submit()
                    }
                } else {
                    $('#saveFilterForm').submit()
                }
            })
    }
</script>
<div id="saveFilter" class="modal fade" tabindex="1" role="dialog" aria-labelledby="exampleModalCenterTile" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <form id="saveFilterForm" asp-action="SaveFilter">
                <div class="modal-header">
                    <h5 class="modal-title" id="saveFilterTitle">Save Filter</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label asp-for="Filter.FilterName" class="control-label"></label>
                        <input asp-for="Filter.FilterName" class="form-control" />
                    </div>

                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.FirstName, "Filter.FirstName", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.LastName, "Filter.LastName", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.Email, "Filter.Email", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.Position, "Filter.Position", "hidden")

                    <input type="hidden" asp-for="Filter.FilterID" class="form-control" />
                    <input type="hidden" asp-for="Filter.BeginDateOfHire" class="form-control" />
                    <input type="hidden" asp-for="Filter.EndDateOfHire" class="form-control" />
                    <input type="hidden" asp-for="Filter.Goal" />
                    <input type="hidden" asp-for="Filter.MidYear" />
                    <input type="hidden" asp-for="Filter.EndYear" />
                    <input type="hidden" asp-for="Filter.GoalMet" />
                    <input type="hidden" asp-for="Filter.TAndAApp" />
                    <input type="hidden" asp-for="Filter.AppApp" />
                    <input type="hidden" asp-for="Filter.ClassCompleted" />
                    <input type="hidden" asp-for="Filter.ClassPaid" />
                    <input type="hidden" asp-for="Filter.BeginRequiredHours" class="form-control" />
                    <input type="hidden" asp-for="Filter.EndRequiredHours" class="form-control" />
                    <input type="hidden" asp-for="Filter.BeginHoursEarned" class="form-control" />
                    <input type="hidden" asp-for="Filter.EndHoursEarned" class="form-control" />
                    <input type="hidden" asp-for="Filter.BeginTermDate" class="form-control" />
                    <input type="hidden" asp-for="Filter.EndTermDate" class="form-control" />

                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.CertCompleted, "Filter.CertCompleted", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.EducationLevel, "Filter.EducationLevel", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.EducationType, "Filter.EducationType", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.EducationDetail, "Filter.EducationDetail", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.CenterName, "Filter.CenterName", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.CenterCounty, "Filter.CenterCounty", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.CenterRegion, "Filter.CenterRegion", "hidden")

                    <input type="hidden" asp-for="Filter.BeginTimeUntilExpire" class="form-control" />
                    <input type="hidden" asp-for="Filter.EndTimeUntilExpire" class="form-control" />
                    <input type="hidden" asp-for="Filter.ShouldCheckPositionReq" />
                    <input type="hidden" asp-for="Filter.IsInactive" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" value="Add" class="btn btn-primary" onclick="validateSave()">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- End name filter save modal -->
<script type="text/javascript">
    function exportexcel() {
        $("#myTable").table2excel({
            name: "Table2Excel",
            filename: "ECSReport",
            fileext: ".xls"
        });
    }

       //gets the list of all available certs to create table headers and then passes them to getTable function
    function getCerts() {
        $.getJSON('/Reports/GetCertList', function (json) {
            var trCenter = '';
            var tdCenter = '';
            var modalCenter = '';
            var i = 23;
            $.each(json, function (index, cert) {   
                trCenter += '<th class="' + findAndReplace(cert.CertName, " ", "_") + '">' + cert.CertName + ' Expire Date<i class="glyphicon glyphicon-info-sign" data-toggle="tooltip" title="Expire Date(Days Until Expire, Negative Numbers are Expired, * are required)"></i></th>';
                tdCenter += '<td id ="' + findAndReplace(cert.CertName, " ", "_") + '"></td > '
                modalCenter += '<li><input type="checkbox" class="toggle-vis" data-column="' + i + '"> ' + cert.CertName + '</li>'
                i++;
                });
            getTable(trCenter, tdCenter, modalCenter);

        });
    }
     function getTable(trCenter, tdCenter, modalCenter) {
            done='';
            $('#StaffTable thead tr').append(trCenter);
            $('#StaffTable tbody tr').append(tdCenter);
            console.log(RTBody);
            $.each(RTBody, function(index, razorCert)
            {
                if (razorCert.isReq) {
                    if (razorCert.certName != "" && razorCert.DaysUnitlExp <= 30) {
                        $("#" + (razorCert.staffID) + "> #" + (razorCert.certName)).append('<span class ="thirtyDays btn-danger">' + moment(razorCert.certExpDate).format("M/D/YYYY") + '(' + razorCert.DaysUnitlExp + ')<span>');
                    }//end 30 days
                    if (razorCert.certName != "" && razorCert.DaysUnitlExp <= 60) {
                        $("#" + (razorCert.staffID) + "> #" + (razorCert.certName)).append('<span class ="sixtyDays btn-warning">' + moment(razorCert.certExpDate).format("M/D/YYYY") + '(' + razorCert.DaysUnitlExp + ')<span>');
                    }//end 60 days
                    if (razorCert.certName != "" && razorCert.DaysUnitlExp <= 90) {
                        $("#" + (razorCert.staffID) + "> #" + (razorCert.certName)).append('<span class ="ninetyDays btn-info">' + moment(razorCert.certExpDate).format("M/D/YYYY") + '(' + razorCert.DaysUnitlExp + ')<span>');
                    }//end 90 days
                }//end required cert if check
                else
                {
                    if (razorCert.certName != "") {
                        $("#" + (razorCert.staffID) + "> #" + (razorCert.certName)).append('<span class ="">' + moment(razorCert.certExpDate).format("M/D/YYYY") + '(' + razorCert.DaysUnitlExp + ')<span>');
                    }//end 30 days

                }    
            });
            //$('#checks').append(modalCenter);

            //build data table after js is done
            buildTable(done);
        };
     //datatable section
    function buildTable(data) {
        var table = $("#StaffTable").DataTable();
    };

    //start first function to lead to callbacks getCerts=>getTable=>buildTable
    getCerts();
</script>