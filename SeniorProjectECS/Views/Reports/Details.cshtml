@model SeniorProjectECS.Models.StaffFilterViewModel
@using SeniorProjectECS.Library
@{
    ViewBag.ContentCssNoMargin = "margin-left: 100px; margin-right:100px";
}
<link rel="stylesheet" href="~/css/legendstyling.css" />

<div class="container">
    <div class="row">
        <img src="~/images/ecslogo.png" alt="Company Logo" class="img-responsive" align="left" style="width: 165px; height: 55px" />
    </div>
<div class="col-2 col-md-2">
    <div class='my-legend'>
        <div class='legend-title'>Color Legend</div>
        <div class='legend-scale'>
            <ul class='legend-labels'>
                <li><span style='background:#FB8072;'></span>30 Days before Expires and Required</li>
                <li><span style='background:#FFFFB3;'></span>60 Days before Expires and Required</li>
                <li><span style='background:#80B1D3;'></span>90 Days before Expires and Required</li>
            </ul>
        </div>
    </div>
</div>
<div class="col-12 col-md-10 container page-header">
    <h2>@Html.Raw(ViewBag.LoggedUser)'s @Html.Raw(ViewBag.AccessRole) Dash Board Panel</h2>
    <div class="row">
        <div class="col-6">
            <form asp-action="LoadFilter">
                <div asp-validation-summary="None" class="text-danger"></div>
                <div class="form-group">
                    <select id="filterSelect" name="FilterID" class="form-control"></select>
                </div>
                <table class="table col-12">
                    <tr>
                       <th><input type="submit" value="Load Filter" class="btn btn-default btn-primary" /></th>
                        <h4>Select a Filter</h4>
                        <span AdminOnly>
                            <th><button type="button" class="btn btn-default btn-primary" onclick="location.href='@Url.Action("CreateFilter")'">Create New Filter</button></th>
                            <th><button type="button" class="btn btn-danger" onclick="delFilter()">Delete Filter <span class="glyphicon glyphicon-trash"></span>&nbsp;</button></th>
                            <th>@Html.ActionLink("Edit Current Filter", "EditFilter", Model.Filter, new { @class = "btn btn-primary btn-large" })</th>
                            <th><button type="button" class="btn btn-default btn-primary" data-toggle="modal" data-target="#saveFilter">Save Current Filter <span class="glyphicon glyphicon-floppy-disk"></span>&nbsp;</button></th>
                        </span>
                        <th><button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal"> Toggle Specific Columns</button></th>
                        <th><button type="button" class="btn btn-primary" onclick="exportexcel()">Export Curent View to Excel <span class="glyphicon glyphicon-export"></span>&nbsp;</button></th>
                    </tr>
                </table>
            </form>
        </div>
    </div>
</div>
<div class="col-12 col-md-10 container">
    <!-- Button trigger modal -->
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Add or Remove Columns</h4>
                </div>
                <div class="modal-body">
                    <div id="grpChkBox">
                        <ul id="checks" class="col-2" style="list-style-type: none; display: inline-block;">
                            Individual
                            <li><input type="checkbox" class="toggle-vis" data-column="1" /> First Name</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="2" /> Last Name</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="3" /> Email</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="4" /> Date Of Hire</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="5" /> Center Name</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="6" /> Center County</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="7" /> Ceter Region</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="8" /> Position</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="9" /> PDP Goal Begining of Year on File</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="10" /> PDP Mid Year Goal on File</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="11" /> PDP End of Year Goal on File</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="12" /> GoalMet </li>
                            <li><input type="checkbox" class="toggle-vis" data-column="13" /> TA</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="14" /> Application Aproved</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="15" /> Class Completed</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="16" /> Class Paid</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="17" /> Required Hours</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="18" /> Hours Earned></li>
                            <li><input type="checkbox" class="toggle-vis" data-column="19" /> Term Date</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="20" /> Degree Abrv</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="21" /> Degree Level</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="22" /> Degree Type</li>
                            <li><input type="checkbox" class="toggle-vis" data-column="23" /> Degree Detail</li>
                        </ul>
                        <ul class="col-2" style="list-style-type: none; display: inline-block;">
                            Groups

                            <li><button type="button" id="unselectCenters" class="btn btn-default btn-danger">Unselect Centers</button></li>
                            <li><button type="button" id="unselectGoals" class="btn btn-default btn-danger">Unselect Goals</button></li>
                            <li><button type="button" id="unselectTA" class="btn btn-default btn-danger">Unselect Tuition</button></li>
                            <li><button type="button" id="unselectTraining" class="btn btn-default btn-danger">Unselect Training Hours</button></li>
                            <li><button type="button" id="unselectEdu" class="btn btn-default btn-danger">Unselect Education</button></li>
                            <li><button type="button" id="unselectCerts" class="btn btn-default btn-danger">Unselect Certs</button></li>
                            <li><button type="button" id="selectCenters" class="btn btn-default btn-primary">Select Centers</button></li>
                            <li><button type="button" id="selectGoals" class="btn btn-default btn-primary">Select Goals</button></li>
                            <li><button type="button" id="selectTA" class="btn btn-default btn-primary">Select Tuition</button></li>
                            <li><button type="button" id="selectTraining" class="btn btn-default btn-primary">Select Training Hours</button></li>
                            <li><button type="button" id="selectEdu" class="btn btn-default btn-primary">Select Education</button></li>
                            <li><button type="button" id="selectCerts" class="btn btn-default btn-primary">Select Certs</button></li>
                        </ul>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default btn-primary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <table class="table table-bordered table-condensed tablesorter" id="StaffTable">
        <thead>
            <tr>
                <th>
                    <span AdminOnly>Edit</span>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].FirstName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].LastName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].Email)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].DateOfHire)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].Center.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].Center.County)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].Center.Region)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].Positions)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].Goal)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].MidYear)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].EndYear)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].GoalMet)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].TAndAApp)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].AppApp)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].ClassCompleted)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].ClassPaid)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].RequiredHours)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].HoursEarned)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StaffMembers[0].TermDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => Model.StaffMembers[0].Education[0].DegreeAbrv)
                </th>
                <th>
                    @Html.DisplayNameFor(model => Model.StaffMembers[0].Education[0].DegreeLevel)
                </th>
                <th>
                    @Html.DisplayNameFor(model => Model.StaffMembers[0].Education[0].DegreeType)
                </th>
                <th>
                    @Html.DisplayNameFor(model => Model.StaffMembers[0].Education[0].DegreeDetail)
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.StaffMembers)
            {

                    <tr id="@item.StaffMemberID">
                        <td>
                            <span AdminOnly>@Html.ActionLink("Edit", "Edit", "StaffMember", new { id = item.StaffMemberID })</span>
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FirstName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.LastName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Email)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.DateOfHire)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Center.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Center.County)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Center.Region)
                        </td>
                        <td>
                            <ul class="list-unstyled">
                                @foreach (Position pos in item.Positions)
    {
                                <li>@Html.DisplayFor(model => pos.PositionTitle)</li>
}
                            </ul>
                        </td>
                        <td>
                            @(item.Goal ? "Yes" : "No")
                        </td>
                        <td>
                            @(item.MidYear ? "Yes" : "No")
                        </td>
                        <td>
                            @(item.EndYear ? "Yes" : "No")
                        </td>
                        <td>
                            @(item.GoalMet ? "Yes" : "No")
                        </td>
                        <td>
                            @(item.TAndAApp ? "Yes" : "No")
                        </td>
                        <td>
                            @(item.AppApp ? "Yes" : "No")
                        </td>
                        <td>
                            @(item.ClassCompleted ? "Yes" : "No")
                        </td>
                        <td>
                            @(item.ClassPaid ? "Yes" : "No")
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.RequiredHours)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.HoursEarned)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.TermDate)
                        </td>
                        <td>
                            <ul class="list-unstyled">
                            @foreach (Education edu in item.Education)
                            {
                                <li>@Html.DisplayFor(model => edu.DegreeAbrv)</li>
                            }
                            </ul>
                        </td>
                        <td>
                            <ul class="list-unstyled">
                                @foreach (Education edu in item.Education)
                                 {
                                <li>@Html.DisplayFor(model => edu.DegreeLevel)</li>
                                 }
                            </ul>
                        </td>
                        <td>
                            <ul class="list-unstyled">
                                @foreach (Education edu in item.Education)
                                {
                                 <li> @Html.DisplayFor(model => edu.DegreeType)</li>
                                }
                            </ul>
                        </td>
                        <td>
                            <ul class="list-unstyled">
                                @foreach (Education edu in item.Education)
                                {
                                    <li> @Html.DisplayFor(model => edu.DegreeDetail)</li>
                                }
                            </ul>
                        </td>
                        
                    </tr>

            }
        </tbody>
    </table>
</div>
<script src="~/lib/jquery-table2excel/dist/jquery.table2excel.min.js"></script>
<script src="~/lib/moment/min/moment.min.js"></script>
<script src="~/js/reports.js" asp-append-version="true"></script>
<script>
     var RTBody=[];
             @foreach (var item in Model.StaffMembers)
             {
                 foreach (var cert in item.CompletedCerts)
                 {
                    <text>
                    var staffID = '@item.StaffMemberID';
                    var certExpDate ='@cert.ExpireDate';
                    var certToJS = findAndReplace('@cert.Cert.CertName', " ", "_");
                    var certIDRazor = '@cert.Cert.CertificationID';
                    var isReq = '@cert.IsRequired';
                    isReqFixed = isReq.toLowerCase();
                    var DaysUnitlExp = '@cert.DaysUntilExpire';
                    var inProgressRaw='@cert.CertInProgress';
                    inProgressConverted= inProgressRaw.toLowerCase();
                    //console.log(certExpDate);
                    //set all the object's values then push to array
                    var razorToPush = new Object;
                    razorToPush.staffID = staffID;
                    razorToPush.certName =certToJS;
                    razorToPush.certExpDate = certExpDate;
                    razorToPush.isReqFix = isReqFixed;
                    razorToPush.DaysUnitlExp = parseInt(DaysUnitlExp);
                    razorToPush.certID =certIDRazor;
                    razorToPush.inProgress=inProgressConverted;
                    RTBody.push(razorToPush);
                    </text>
                 }

             }
</script>


<!-- Begin name filter save modal -->
<script type="text/javascript">
    function validateSave() {

        // Ensure that a filter name is given
        if ($('#Filter_FilterName').val() == '') {
            alert("Please enter a filter name.");
            return false;
        }

        // Check if we want to override a filter if it already exists
        $.get("/Reports/ValidateSave", { filterName: $('#Filter_FilterName').val() },
            function (response) {
                if (response == "false") {
                    if (confirm("Filter name already in use. Do you want to overwrite it?")) {
                        $('#saveFilterForm').submit()
                    }
                } else {
                    $('#saveFilterForm').submit()
                }
            })
    }
</script>
<div id="saveFilter" class="modal fade" tabindex="1" role="dialog" aria-labelledby="exampleModalCenterTile" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <form id="saveFilterForm" asp-action="SaveFilter">
                <div class="modal-header">
                    <h5 class="modal-title" id="saveFilterTitle">Save Filter</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label asp-for="Filter.FilterName" class="control-label"></label>
                        <input asp-for="Filter.FilterName" class="form-control" />
                    </div>

                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.FirstName, "Filter.FirstName", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.LastName, "Filter.LastName", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.Email, "Filter.Email", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.Position, "Filter.Position", "hidden")

                    <input type="hidden" asp-for="Filter.FilterID" class="form-control" />
                    <input type="hidden" asp-for="Filter.BeginDateOfHire" class="form-control" />
                    <input type="hidden" asp-for="Filter.EndDateOfHire" class="form-control" />
                    <input type="hidden" asp-for="Filter.Goal" />
                    <input type="hidden" asp-for="Filter.MidYear" />
                    <input type="hidden" asp-for="Filter.EndYear" />
                    <input type="hidden" asp-for="Filter.GoalMet" />
                    <input type="hidden" asp-for="Filter.TAndAApp" />
                    <input type="hidden" asp-for="Filter.AppApp" />
                    <input type="hidden" asp-for="Filter.ClassCompleted" />
                    <input type="hidden" asp-for="Filter.ClassPaid" />
                    <input type="hidden" asp-for="Filter.BeginRequiredHours" class="form-control" />
                    <input type="hidden" asp-for="Filter.EndRequiredHours" class="form-control" />
                    <input type="hidden" asp-for="Filter.BeginHoursEarned" class="form-control" />
                    <input type="hidden" asp-for="Filter.EndHoursEarned" class="form-control" />
                    <input type="hidden" asp-for="Filter.BeginTermDate" class="form-control" />
                    <input type="hidden" asp-for="Filter.EndTermDate" class="form-control" />

                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.CertCompleted, "Filter.CertCompleted", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.EducationLevel, "Filter.EducationLevel", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.EducationType, "Filter.EducationType", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.EducationDetail, "Filter.EducationDetail", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.CenterName, "Filter.CenterName", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.CenterCounty, "Filter.CenterCounty", "hidden")
                    @CustomHTMLHelpers.BuildEditFromArray(Model.Filter.CenterRegion, "Filter.CenterRegion", "hidden")

                    <input type="hidden" asp-for="Filter.TimeUntilExpire" class="form-control" />
                    <input type="hidden" asp-for="Filter.ShouldCheckPositionReq" />
                    <input type="hidden" asp-for="Filter.IsInactive" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" value="Add" class="btn btn-primary" onclick="validateSave()">Save</button>
                </div>
            </form>
        </div>
    </div>
    </div>
</div>
<!-- End name filter save modal -->
<script type="text/javascript">
    //takes the current view on the page without hidden elements and exports it to excel
    function exportexcel() {
        var $clonedTable = $("#StaffTable").clone();
        $clonedTable.find('[style*="display: none"]').remove();
        $($clonedTable).table2excel({
            name: "Table2Excel",
            filename: "ECSReport",
            fileext: ".xls"
        });
    }
    //toggles css tooltips for bootstrap
    $(document).ready(function () {
        $('[data-toggle="tooltip"]').tooltip();
    });

        function delFilter() {
        if (confirm("Are you sure you want to delete the " + $("#filterSelect option:selected").text() + " filter?")) {
            var id = $('#filterSelect').val()
            window.location = '@Url.Action("DeleteFilter")' + '?id=' + id
        }
    }
    //gets the list of all available certs to create table headers and then passes them to getTable function
    function getCerts() {
        $.getJSON('/Reports/GetCertList', function (json) {
            var trCenter = '';
            var tdCenter = '';
            var modalCenter = '';
            var i = 24;
            $.each(json, function (index, cert) {
                trCenter += '<th class="certID' + cert.CertificationID + '">' + cert.CertName + ' Expire Date<i class="glyphicon glyphicon-info-sign" data-toggle="tooltip" title="Expire Date(Days Until Expire, Negative Numbers are Expired, * are required)"></i></th>';
                tdCenter += '<td id ="certID' + cert.CertificationID + '"></td > '
                modalCenter += '<li><input type="checkbox" class="toggle-vis" data-column="' + i + '"> ' + cert.CertName + '</li>'
                i++;
                });
            getTable(trCenter, tdCenter, modalCenter, i);

        });
    }
    function getTable(trCenter, tdCenter, modalCenter, i)
    {
        done='';
        $('#StaffTable thead tr').append(trCenter);
        $('#StaffTable tbody tr').append(tdCenter);
        $.each(RTBody, function (index, razorCert)
        {
            if (razorCert.isReqFix == 'true')
            {
                if (razorCert.DaysUnitlExp <= 30  && razorCert.certExpDate != "")
                {
                    $("#" + (razorCert.staffID) + ">#certID" + (razorCert.certID)).append('<span class ="thirtyDays btn-danger">' + moment(razorCert.certExpDate).format("M/D/YYYY") + '(' + razorCert.DaysUnitlExp + ')<span>');
                    $("#" + (razorCert.staffID) + ">#certID" + (razorCert.certID)).append('<i class="glyphicon glyphicon-asterisk" data-toggle="tooltip"  style="color:red" title="Certification required by Position held">R</i>');
                }//end 30 days
                else if (razorCert.DaysUnitlExp <= 60  && razorCert.certExpDate != "")
                {
                    $("#" + (razorCert.staffID) + ">#certID" + (razorCert.certID)).append('<span class ="sixtyDays btn-warning">' + moment(razorCert.certExpDate).format("M/D/YYYY") + '(' + razorCert.DaysUnitlExp + ')<span>');
                    $("#" + (razorCert.staffID) + ">#certID" + (razorCert.certID)).append('<i class="glyphicon glyphicon-asterisk" data-toggle="tooltip" style="color:red" title="Certification required by Position held">R</i>');
                }//end 60 days
                else if ( razorCert.DaysUnitlExp <= 90  && razorCert.certExpDate != "")
                {
                    $("#" + (razorCert.staffID) + ">#certID" + (razorCert.certID)).append('<span class ="ninetyDays btn-info">' + moment(razorCert.certExpDate).format("M/D/YYYY") + '(' + razorCert.DaysUnitlExp + ')<span>');
                    $("#" + (razorCert.staffID) + ">#certID" + (razorCert.certID)).append('<i class="glyphicon glyphicon-asterisk" data-toggle="tooltip" style="color:red" title="Certification required by Position held">R</i>');
                }//end 90 days
                else if (razorCert.certName != ""  && razorCert.certExpDate != "")
                {
                    $("#" + (razorCert.staffID) + ">#certID" + (razorCert.certID)).append('<span class ="">' + moment(razorCert.certExpDate).format("M/D/YYYY") + '(' + razorCert.DaysUnitlExp + ')<span>');
                    $("#" + (razorCert.staffID) + ">#certID" + (razorCert.certID)).append('<i class="glyphicon glyphicon-asterisk" data-toggle="tooltip"style="color:red"  title="Certification required by Position held">R</i>');
                }//end found certs
                else
                {
                    $("#" + (razorCert.staffID) + ">#certID" + (razorCert.certID)).append('<i class="glyphicon glyphicon-asterisk" style="color:red" data-toggle="tooltip" title="Certification required by Position held">R</i>');
                }
             }//end required cert if check
             if (razorCert.isReqFix == 'false' && razorCert.certExpDate != "")
             {
                 if (razorCert.certName != "")
                 {
                     $("#" + (razorCert.staffID) + ">#certID" + (razorCert.certID)).append('<span class ="">' + moment(razorCert.certExpDate).format("M/D/YYYY") + '(' + razorCert.DaysUnitlExp + ')<span>');
                 }
             }//end check if not required
             if (razorCert.inProgress =='true')
             {
                 $("#" + (razorCert.staffID) + ">#certID" + (razorCert.certID)).append('<i class="glyphicon glyphicon-refresh" data-toggle="tooltip"style="color:green" title="Certification is in Progress">I</i>');
             }//end in progress check
         });
         $('#checks').append(modalCenter);

         //build data table after js is done
         buildTable(done, i);
        };
    //datatable section
    function buildTable(data, i)
    {
        var table = $("#StaffTable").DataTable({"order": [[1, "asc"]], "pageLength": 15, columnDefs: [
                { targets: [8,9,10,11,12,13,14,15,16,17,18,19], visible: false },
            ]});

         $('.toggle-vis:checkbox').on('click', function () {
            // Get the column API object
            var column = table.column($(this).attr('data-column'));

            // Toggle the visibility
            column.visible(!column.visible());
        });

        filterColumns(table)

    $("#unselectCenters").click(function () {
            table.columns([ 5, 6, 7]).visible(false, false);
            table.columns.adjust().draw(true); // adjust column sizing and redraw
        });
        $("#selectCenters").click(function () {
            table.columns([ 5, 6, 7]).visible(true, true);
            table.columns.adjust().draw(true); // adjust column sizing and redraw
        });

        $("#unselectGoals").click(function () {
            table.columns([ 9, 10, 11, 12]).visible(false, false);
            table.columns.adjust().draw(true); // adjust column sizing and redraw
        });
        $("#selectGoals").click(function () {
            table.columns([ 9, 10, 11, 12]).visible(true, true);
            table.columns.adjust().draw(true); // adjust column sizing and redraw
        });

        $("#unselectTA").click(function () {
            table.columns([ 13, 14, 15, 16, 18]).visible(false, false);
            table.columns.adjust().draw(true); // adjust column sizing and redraw
        });
        $("#selectTA").click(function () {
            table.columns([13, 14, 15, 16, 18]).visible(true, true);
            table.columns.adjust().draw(true); // adjust column sizing and redraw
        });

        $("#unselectTraining").click(function () {
            table.columns([ 17, 18]).visible(false, false);
            table.columns.adjust().draw(true); // adjust column sizing and redraw
        });
        $("#selectTraining").click(function () {
            table.columns([ 17, 18]).visible(true, true);
            table.columns.adjust().draw(true); // adjust column sizing and redraw
        });

        $("#unselectEdu").click(function () {
            table.columns([20, 21,22, 23]).visible(false, false);
            table.columns.adjust().draw(true); // adjust column sizing and redraw
        });
        $("#selectEdu").click(function () {
            table.columns([ 20, 21,22, 23]).visible(true, true);
            table.columns.adjust().draw(true); // adjust column sizing and redraw
        });
        $("#unselectCerts").click(function () {
            for (var j =24; j<i; j++)
            {
                table.columns([ j]).visible(false, false);
             }
            table.columns.adjust().draw(true); // adjust column sizing and redraw
        });
        $("#selectCerts").click(function () {
             for (var j =24; j<i; j++)
            {
                table.columns([ j]).visible(true, true);
            }
            table.columns.adjust().draw(true); // adjust column sizing and redraw
        });
    };

    function filterColumns(table) {
        table.columns().every(function (colIdx) {
            var data = table.column(colIdx).data().unique()
            if(data.length == 1 && data[0] == "") {
                table.column(colIdx).visible(false, false)
            }
        })
    }

    //start first function to lead to callbacks getCerts=>getTable=>buildTable
    getCerts();
</script>

